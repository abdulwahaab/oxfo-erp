@using OxfoHome.DAL
@using OxfoHome.DAL.DTOs
@using OxfoHome.DAL.Services
@using System.Linq.Expressions

@if (data == null)
{
    <Loader />
}
else if (data.Items.Count() == 0)
{
    <div class="alert alert-primary text-center mt-3" role="alert">
    No data found!
</div>
}
else
{
    <div class="row mt-3">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-4">
                <h4 class="green text-center">Total Received <br /> @String.Format("{0:N0}", accountData.TotalPaid)</h4>
            </div>
            <div class="col-md-4">
                <h4 class="red text-center">Total Paid <br /> @String.Format("{0:N0}", accountData.TotalReceived)</h4>
            </div>
            <div class="col-md-4">
                <h4 class="grey text-center">Balance <br /> @String.Format("{0:N0}", accountData.Balance)</h4>
            </div>
        </div>
    </div>
</div>
    <div class="card mt-3">
        <div class="card-body">
            <table class="table table-striped table-hover dataGrid">
                <thead>
                    <tr>
                        <th class="sort col-md-2" @onclick="() => SortColumn(3)">
                            Amount <i class="material-icons">arrow_drop_down</i>
                        </th>
                        <th class="sort col-md-2" @onclick="() => SortColumn(4)">
                            Created On <i class="material-icons">arrow_drop_down</i>
                        </th>
                        <th class="col-md-2">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (isLoading)
                    {
                        <tr>
                            <td colspan="5">
                                <Loader />
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in data.Items)
                        {
                            string encryptedId = encryptor.Encrypt(item.Id.ToString());
                            <tr>
                                <td>
                                    @if (item.FromPayeeId == payeeId)
                                    {
                                        <b class="green">@item.Amount</b>
                                    }
                                    else if (item.ToPayeeId == payeeId)
                                    {
                                        <b class="red">@item.Amount</b>
                                    }
                                </td>
                                <td>@item.CreatedOn</td>
                                <td>
                                    <a href="/payment/info/@encryptedId" class="no-underline">Edit</a> |
                                    <a href="/payment/detail/@encryptedId" class="no-underline">Details</a> | <button
                                        @onclick="() => ShowConfirmDialog(item.Id)" class="link red">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <Pagination TotalPages="totalPages" CurrentPage="currentPage" GoToPage="GoToPage" />
        </div>
    </div>
    <ConfirmDialog @ref="confirmDialog" Title="Confirm!" Message="Are you sure you want to delete this record?"
    ConfirmationResult="OnConfirmationResult" />
    <Toast @ref="toaster" Title="Deleted!" Color="Green" Message="The record is deleted" />
}

@inject IPaymentService service
@inject IPayeeService payeeService
@inject IEncryptionService encryptor

@code {
    [Parameter] public string EntityId { get; set; }
    private int totalPages, pageSize = 10, currentPage = 1, currentSortColumn = 4, selectedItem, payeeId;
    private bool sortAscending = false, isLoading = false;
    private string? searchQuery;
    private Toast? toaster;
    private AccountBalance accountData;
    private ConfirmDialog? confirmDialog;
    private PagedResult<PaymentDTO>? data;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(EntityId))
        {
            int supplierId = Convert.ToInt32(encryptor.Decrypt(EntityId));
            PayeeDTO payee = await payeeService.Find(x => x.EntityId == supplierId && x.Type.ToLower().Equals("supplier"));
            payeeId = payee != null ? payee.Id : 0;
            if (payeeId > 0)
            {
                await LoadData();
                accountData = await service.GetAccountData(payeeId);
                accountData.Balance = accountData.TotalPaid - accountData.TotalReceived;
            }
        }
    }

    private async Task GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > totalPages) page = totalPages;
        currentPage = page;
        await LoadData();
    }

    private async Task SortColumn(int columnId)
    {
        if (currentSortColumn == columnId)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnId;
            sortAscending = !sortAscending;
        }

        currentPage = 1;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (isLoading) return;

        isLoading = true;
        try
        {
            Expression<Func<PaymentDTO, bool>> filter = (p => p.ToPayeeId == payeeId || p.FromPayeeId == payeeId);

            if (currentSortColumn == 1 && sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderBy(x => x.FromPayeeName)), filter);
            else if (currentSortColumn == 1 && !sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderByDescending(x =>
                x.FromPayeeName)), filter);

            else if (currentSortColumn == 2 && sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderBy(x => x.ToPayeeName)), filter);
            else if (currentSortColumn == 2 && !sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderByDescending(x =>
                x.ToPayeeName)), filter);

            else if (currentSortColumn == 3 && sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderBy(x => x.Amount)), filter);
            else if (currentSortColumn == 3 && !sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderByDescending(x =>
                x.Amount)), filter);

            else if (currentSortColumn == 4 && sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderBy(x => x.CreatedOn)), filter);
            else if (currentSortColumn == 4 && !sortAscending)
                data = await service.GetPagedListAsync(currentPage, pageSize, (query => query.OrderByDescending(x =>
                x.CreatedOn)), filter);

            totalPages = (data!.TotalCount + pageSize - 1) / pageSize;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowConfirmDialog(int id)
    {
        selectedItem = id;
        confirmDialog!.Show();
    }

    private async void OnConfirmationResult(bool isConfirmed)
    {
        if (isConfirmed && selectedItem > 0)
        {
            if (await service.Delete(selectedItem))
            {
                toaster!.Show(seconds: 2);
                await LoadData();
                StateHasChanged();
            }
            selectedItem = 0; // Reset the selected item
        }
    }
}